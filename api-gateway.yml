# Server configuration
server:
  port: ${API_GATEWAY_PORT:4000}

# Spring configuration
spring:
  profiles:
    active: dev
  cloud:
    gateway:
      routes:
        # Authentication Server
        - id: auth-server
          uri: lb://auth-server:5500/ # If the 'url' has a 'lb' scheme (ie lb://my-service), it will use the Spring Cloud LoadBalancerClient to resolve the name.
          predicates:
            - Path=/auth/** # It is an object that tests if the given request fulfills a given condition.
          filters:
            - StripPrefix=1 # remove the prefix from the URL before forwarding the request to the service

        # Sample Microservice 1
        - id: sample-service-1
          uri: lb://sample-service-1 # If the 'url' has a 'lb' scheme (ie lb://my-service), it will use the Spring Cloud LoadBalancerClient to resolve the name.
          predicates:
            - Path=/service-1/** # It is an object that tests if the given request fulfills a given condition.
          filters:
            - StripPrefix=1 # remove the prefix from the URL before forwarding the request to the service

        # Sample Microservice 2
        - id: sample-service-2
          uri: lb://sample-service-2 # If the 'url' has a 'lb' scheme (ie lb://my-service), it will use the Spring Cloud LoadBalancerClient to resolve the name.
          predicates:
            - Path=/service-2/** # It is an object that tests if the given request fulfills a given condition.
          filters:
            - StripPrefix=1 # remove the prefix from the URL before forwarding the request to the service

# Logging configuration
logging:
  pattern:
    # Take the span id and trace id from the Mapped Diagnostic Context (MDC) and put them into the log message.
    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'

# Management configuration for tracing, metrics, and endpoint exposure
management:
  endpoints:
    web:
      exposure:
        include: 'info, health, prometheus'
  tracing:
    sampling:
      # Set trace sampling rate (1.0 = 100% of traces). Adjust based on traffic volume and system capacity.
      probability: 1.0
  metrics:
    tags:
      application: ${spring.application.name}